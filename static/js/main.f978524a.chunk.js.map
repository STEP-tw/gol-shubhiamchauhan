{"version":3,"sources":["_src/gameOfLife.js","_src/util.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["getCombination","require","boardGenerator","rows","columns","Array","fill","map","element","createAliveCells","cells","position","isRealNeighbour","size","index","filterNeighbours","createInitialBoard","aliveCells","emptyBoard","filter","reduce","findNeighbourCells","cell","differenceFromNeighbour","splice","addDifferenceToNeighbour","difference","result","concat","push","bind","getNeighbourCellState","board","cellState","state","extractCellState","1","0","canBeAlive","neighbourCellStates","length","canBeDead","aliveCount","isStateSame","updateRow","neighbourCells","row","nextGenWorld","column","updateState","nextGenerationState","iteration","counter","module","exports","nextGeneration","currGeneration","bounds","topLeftBound","topLeft","generation","aliveCellIndex","bottomRight","aliveIndexes","getAliveCellIndex","relativeNextGeneration","zipElement","firstElement","list","secondElement","zipArray","listToZip","valueToZipWithList","zip","firstList","secondList","zipList","Cell","react_default","a","createElement","width","height","this","props","color","x","col","y","stroke","strokeWidth","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","gen","_this2","timerID","setInterval","tick","setState","colors","i","j","src_Cell","genCells","forEach","join","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f978524a.chunk.js","sourcesContent":["const { getCombination } = require('./util.js');\n\nconst boardGenerator = function(rows, columns) {\n  let board = new Array(rows).fill([]);\n  return board.map(element => new Array(columns).fill(0));\n}\n\nconst createAliveCells = function(cells, position) {\n  cells[position[0]][position[1]] = 1;\n  return cells;\n}\n\nconst isRealNeighbour = function(size, index) {\n  return !(index < 0 || index >= size);\n}\n\nconst filterNeighbours = function(rows, columns) {\n  return function(position) {\n    return isRealNeighbour(rows,position[0]) && isRealNeighbour(columns,position[1]);\n  }\n}\n\nconst createInitialBoard = function(rows, columns, aliveCells) {\n  let emptyBoard = boardGenerator(rows, columns);\n  aliveCells = aliveCells.filter(filterNeighbours(rows, columns));\n  return aliveCells.reduce(createAliveCells, emptyBoard);\n}\n\nconst addToListValue = function(cell, difference) {\n  let result = [].concat(cell[0]+difference[0]);\n  result.push(cell[1]+difference[1]);\n  return result;\n}\n\nconst findNeighbourCells = function(rows, columns, cell) {\n  let differenceFromNeighbour = getCombination([-1,0,1],[-1,0,1]);\n  differenceFromNeighbour.splice(4,1);\n  let addDifferenceToNeighbour = addToListValue.bind(null, cell);\n  let neighbourCells = differenceFromNeighbour.map(addDifferenceToNeighbour);\n  return neighbourCells.filter(filterNeighbours(rows, columns));\n}\n\nconst extractCellState = function(board) {\n  return function(cellState, position) {\n    let state = board[position[0]][position[1]];\n    cellState[state].push(state);\n    return cellState;\n  }\n}\n\nconst getNeighbourCellState = function(rows, columns, board, cell) {\n  let cellState = { 1:[], 0:[]};\n  let neighbours = findNeighbourCells(rows,columns, cell);\n  return neighbours.reduce(extractCellState(board), cellState);\n}\n\nconst canBeAlive = function(neighbourCellStates) {\n  return neighbourCellStates[1].length == 3;\n}\n\nconst canBeDead = function(neighbourCellStates) {\n  let aliveCount = neighbourCellStates[1].length;\n  return (aliveCount < 2 || aliveCount > 3);\n}\n\nconst isStateSame = function(neighbourCellStates) {\n  return !canBeAlive(neighbourCellStates) && !canBeDead(neighbourCellStates);\n}\n\nconst updateState = function(neighbourCells, index){\n  return function(nextGenWorld, cell, column){\n    let neighbourCellStates = neighbourCells([index, column]);\n    canBeAlive(neighbourCellStates) && nextGenWorld.push(1);\n    canBeDead(neighbourCellStates) && nextGenWorld.push(0);\n    isStateSame(neighbourCellStates) && nextGenWorld.push(cell);\n    return nextGenWorld;\n  }\n}\n\nconst updateRow = function(neighbourCells){\n  return function(row , index) {\n    return row.reduce(updateState(neighbourCells,index),[]);\n  }\n}\n\nconst nextGenerationState = function(rows,columns,aliveCells, iteration) {\n  let board = createInitialBoard(rows,columns,aliveCells);\n  for(let counter = 0; counter < iteration; counter++) {\n    let neighbourCells = getNeighbourCellState.bind(null,rows,columns,board)\n    board = board.map(updateRow(neighbourCells));\n  }\n  return board;\n}\n\nconst getAliveCellIndex = function(board) {\n  let aliveIndexes = [];\n  for(let row = 0; row<board.length; row++) {\n    for(let column = 0; column<board[row].length; column++) {\n      board[row][column]==1 && aliveIndexes.push([row,column]);\n    }\n  }\n  return aliveIndexes;\n}\n\nconst relativeCurrGeneration = function(topLeftBound) {\n  return function(generation, aliveCellIndex) {\n    generation.push([aliveCellIndex[0]-topLeftBound[0],aliveCellIndex[1]-topLeftBound[1]]);\n    return generation;\n  }\n}\n\nconst relativeNextGeneration = function(topLeftBound) {\n  return function(generation, aliveCellIndex) {\n    generation.push([aliveCellIndex[0]+topLeftBound[0],aliveCellIndex[1]+topLeftBound[1]]);\n    return generation;\n  }\n}\n\nconst nextGeneration = function(currGeneration,bounds) {\n  currGeneration = currGeneration.reduce(relativeCurrGeneration(bounds.topLeft),[]);\n  let rows = (bounds.bottomRight[0] - bounds.topLeft[0]) + 1;\n  let columns = (bounds.bottomRight[1] - bounds.topLeft[1]) + 1;\n  let nextGenerationWorld = nextGenerationState(rows, columns, currGeneration, 1);\n  let nextGenAliveCells = getAliveCellIndex( nextGenerationWorld );\n  return nextGenAliveCells.reduce(relativeNextGeneration( bounds.topLeft ), []);\n}\n\nmodule.exports = { nextGeneration,\n  createInitialBoard,\n  findNeighbourCells,\n  getNeighbourCellState,\n  nextGenerationState,\n  canBeAlive,\n  canBeDead,\n  isStateSame,\n  boardGenerator,\n  filterNeighbours,\n  createAliveCells };\n","const zipElement = function(firstElement,list,secondElement){\n  list.push([firstElement,secondElement]);\n  return list;\n}\n\nconst zipArray = function(listToZip, list, valueToZipWithList) {\n  let zip = zipElement.bind(null,valueToZipWithList); \n  return listToZip.reduce(zip, list);\n}\n\nconst getCombination = function(firstList, secondList) {\n  let zipList = zipArray.bind(null,secondList)\n  return firstList.reduce(zipList,[]);\n}\n\nmodule.exports = { zipElement,\n  zipArray,\n  getCombination };\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nconst {nextGeneration} = require('./_src/gameOfLife.js');\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}